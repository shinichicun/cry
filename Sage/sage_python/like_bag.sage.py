

# This file was *autogenerated* from the file like_bag.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_100000 = Integer(100000); _sage_const_2 = Integer(2); _sage_const_54 = Integer(54); _sage_const_6 = Integer(6); _sage_const_246958014720811275218104076569049326290644239557530068428118798615665805772543413056451802441767739814039814801665470000604369655455176614208872004460306917283189719075937276854208063959712772106122358987076992893882612110212736255979963729589114580019282486129385717120023802438473862301616755666896320219 = Integer(246958014720811275218104076569049326290644239557530068428118798615665805772543413056451802441767739814039814801665470000604369655455176614208872004460306917283189719075937276854208063959712772106122358987076992893882612110212736255979963729589114580019282486129385717120023802438473862301616755666896320219); _sage_const_8 = Integer(8); _sage_const_3 = Integer(3); _sage_const_2217344750802206381450697759494445960779437717462348681384524178447235038091021161679290442338425818571580297588006934662292632812858663101063323564430837837089747180954075941884140209173607463120289909478482586857884143581315690703171442859404299097275515736999888245377125 = Integer(2217344750802206381450697759494445960779437717462348681384524178447235038091021161679290442338425818571580297588006934662292632812858663101063323564430837837089747180954075941884140209173607463120289909478482586857884143581315690703171442859404299097275515736999888245377125); _sage_const_29653 = Integer(29653); _sage_const_50082 = Integer(50082); _sage_const_5 = Integer(5); _sage_const_61737 = Integer(61737); _sage_const_4 = Integer(4); _sage_const_25317 = Integer(25317); _sage_const_26387 = Integer(26387); _sage_const_15547 = Integer(15547); _sage_const_8211 = Integer(8211); _sage_const_16267 = Integer(16267); _sage_const_22103 = Integer(22103); _sage_const_12613 = Integer(12613); _sage_const_34024 = Integer(34024); _sage_const_37414 = Integer(37414); _sage_const_8698 = Integer(8698); _sage_const_57345 = Integer(57345); _sage_const_12826 = Integer(12826); _sage_const_3281 = Integer(3281); _sage_const_12822 = Integer(12822); _sage_const_50811 = Integer(50811); _sage_const_29210 = Integer(29210); _sage_const_8471 = Integer(8471); _sage_const_5913 = Integer(5913)
from Crypto.Util.number import *
from gmpy2 import *
import random
import math


def onemod(e, q):
    p = random.randint(_sage_const_1 , q-_sage_const_1 )
    while(powmod(p, (q-_sage_const_1 )//e, q) == _sage_const_1 ):  # (r,s)=1
        p = random.randint(_sage_const_1 , q)
    return p

def AMM_rth(o, r, q):  # r|(q-1)
    assert((q-_sage_const_1 ) % r == _sage_const_0 )
    p = onemod(r, q)

    t = _sage_const_0 
    s = q-_sage_const_1 
    while(s % r == _sage_const_0 ):
        s = s//r
        t += _sage_const_1 
    k = _sage_const_1 
    while((s*k+_sage_const_1 ) % r != _sage_const_0 ):
        k += _sage_const_1 
    alp = (s*k+_sage_const_1 )//r

    a = powmod(p, r**(t-_sage_const_1 )*s, q)
    b = powmod(o, r*a-_sage_const_1 , q)
    c = powmod(p, s, q)
    h = _sage_const_1 

    for i in range(_sage_const_1 , t-_sage_const_1 ):
        d = powmod(int(b), r**(t-_sage_const_1 -i), q)
        if d == _sage_const_1 :
            j = _sage_const_0 
        else:
            j = (-math.log(d, a)) % r
        b = (b*(c**(r*j))) % q
        h = (h*c**j) % q
        c = (c*r) % q
    result = (powmod(o, alp, q)*h)
    return result

def ALL_Solution(m, q, rt, cq, e):
    mp = []
    for pr in rt:
        r = (pr*m) % q
        # assert(pow(r, e, q) == cq)
        mp.append(r)
    return mp


def calc(mp, mq, mr, e, p, q, r):
    i = _sage_const_1 
    j = _sage_const_1 
    t1 = invert(q*r, p)
    t2 = invert(p*r, q)
    t3 = invert(q*p, r)
    for mp1 in mp:
        for mq1 in mq:
            for mr1 in mr:
                j += _sage_const_1 
                if j % _sage_const_100000  == _sage_const_0 :
                    print(j)
                ans = (mp1*t1*q*r+mq1*t2*p*r+mr1*t3*p*q) % (p*q*r)
                if check(ans):
                    return
    return


def check(m):
    try:
        a = long_to_bytes(m)
        if b'flag' in a:
            print(a)
            return True
        else:
            return False
    except:
        return False


def ALL_ROOT2(r, q):  # use function set() and .add() ensure that the generated elements are not repeated
    li = set()
    while(len(li) < r):
        p = powmod(random.randint(_sage_const_1 , q-_sage_const_1 ), (q-_sage_const_1 )//r, q)
        li.add(p)
    return li


M = _sage_const_2 **_sage_const_54 
k = _sage_const_6 
N = _sage_const_246958014720811275218104076569049326290644239557530068428118798615665805772543413056451802441767739814039814801665470000604369655455176614208872004460306917283189719075937276854208063959712772106122358987076992893882612110212736255979963729589114580019282486129385717120023802438473862301616755666896320219 
C = _sage_const_8 
e = _sage_const_3 
c = _sage_const_2217344750802206381450697759494445960779437717462348681384524178447235038091021161679290442338425818571580297588006934662292632812858663101063323564430837837089747180954075941884140209173607463120289909478482586857884143581315690703171442859404299097275515736999888245377125 

"""
mm = [M**i for i in range(3*k, 0, -1)]
L = list(Matrix(3*k+1, 3*k+1))
for i in range(3*k):
    L[i][i] = 1
    L[i][-1] = C*mm[i]
L[-1][-1] = -C*N
L = Matrix(L)
L = L.LLL()[0]
for i in [L]:
    var('x')
    i = list(i)
    i[-1]=(-i[-1])//C
    px = sum([i[j]*(x**(18-j)) for j in range(len(i))])
    #print(px.factor())
    #print("\n")
# (29653*x^6 + 50082*x^5 + 61737*x^4 + 25317*x^3 + 26387*x^2 + 15547*x + 8211)*(16267*x^6 + 22103*x^5 + 12613*x^4 + 34024*x^3 + 37414*x^2 + 8698*x + 57345)*(12826*x^6 + 3281*x^5 + 12822*x^4 + 50811*x^3 + 29210*x^2 + 8471*x + 5913)
"""

p = _sage_const_29653 *x**_sage_const_6  + _sage_const_50082 *x**_sage_const_5  + _sage_const_61737 *x**_sage_const_4  + _sage_const_25317 *x**_sage_const_3  + _sage_const_26387 *x**_sage_const_2  + _sage_const_15547 *x + _sage_const_8211 
q = _sage_const_16267 *x**_sage_const_6  + _sage_const_22103 *x**_sage_const_5  + _sage_const_12613 *x**_sage_const_4  + _sage_const_34024 *x**_sage_const_3  + _sage_const_37414 *x**_sage_const_2  + _sage_const_8698 *x + _sage_const_57345 
r = _sage_const_12826 *x**_sage_const_6  + _sage_const_3281 *x**_sage_const_5  + _sage_const_12822 *x**_sage_const_4  + _sage_const_50811 *x**_sage_const_3  + _sage_const_29210 *x**_sage_const_2  + _sage_const_8471 *x + _sage_const_5913 
mm = [M**j for j in range(k+_sage_const_1 )]
# print(mm)
# print(p.list(), q.list(), r.list())
p = Integer(sum([m * n for m, n in zip(mm, p.list())]))
q = Integer(sum([m * n for m, n in zip(mm, q.list())]))
r = Integer(sum([m * n for m, n in zip(mm, r.list())]))
# print(p, q, r)
'''
p = gcd(N, p)
q = gcd(N, q)
r = gcd(N, r)
print(p, q, r)
'''
cp = c % p
cq = c % q
cr = c % r

mp = AMM_rth(cp, e, p)
mq = AMM_rth(cq, e, q)
mr = AMM_rth(cr, e, r)

rt1 = ALL_ROOT2(e, p)
rt2 = ALL_ROOT2(e, q)
rt3 = ALL_ROOT2(e, r)

amp = ALL_Solution(mp, p, rt1, cp, e)
amq = ALL_Solution(mq, q, rt2, cq, e)
amr = ALL_Solution(mr, r, rt3, cr, e)

# calc函数稍微改了一下
calc(amp, amq, amr, e, p, q, r)

