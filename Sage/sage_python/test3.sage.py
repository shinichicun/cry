

# This file was *autogenerated* from the file test3.sage
from sage.all_cmdline import *   # import sage library

_sage_const_66 = Integer(66); _sage_const_200 = Integer(200); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_20 = Integer(20); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)# type:ignore
from Crypto.Util.number import *
import gmpy2
import re

m = _sage_const_66 
n = _sage_const_200 
p = _sage_const_3 
q = _sage_const_2 **_sage_const_20 

with open ("D:\\SageMath\\sage_python\\enc.out","r") as f:
    data = f.read().split('\n')
    f.close()

A = matrix(m, n, [int(j) for i in data[_sage_const_1 : m + _sage_const_1 ] for j in re.findall(r'-?\d+', i)])
B = matrix(m, n, [int(j) for i in data[m + _sage_const_1 : _sage_const_2  * m + _sage_const_2 ] for j in re.findall(r'-?\d+', i)])
C = matrix(m, n, [int(j) for i in data[_sage_const_2  * m + _sage_const_2 : _sage_const_3  * m + _sage_const_3 ] for j in re.findall(r'-?\d+', i)])
b = vector([int(j) for i in data[_sage_const_3  * m + _sage_const_3 :] for j in re.findall(r'-?\d+', i)])

A = block_matrix([[B], [A], [C]])
M = block_matrix([[A, matrix(_sage_const_3  * m, _sage_const_1 , [_sage_const_0 ] * _sage_const_3  * m)], [matrix(b), matrix([_sage_const_1 ])]])
e = M.LLL()[_sage_const_0 ][:n]
x = A.solve_left(b - e)
for i in x:
    print(chr(i),end="")

