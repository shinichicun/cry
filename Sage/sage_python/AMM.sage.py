

# This file was *autogenerated* from the file AMM.sage
from sage.all_cmdline import *   # import sage library

_sage_const_91027438112295439314606669837102361953591324472804851543344131406676387779969 = Integer(91027438112295439314606669837102361953591324472804851543344131406676387779969); _sage_const_6249734963373034215610144758924910630356277447014258270888329547267471837899275103421406467763122499270790512099702898939814547982931674247240623063334781529511973585977522269522704997379194673181703247780179146749499072297334876619475914747479522310651303344623434565831770309615574478274456549054332451773452773119453059618433160299319070430295124113199473337940505806777950838270849 = Integer(6249734963373034215610144758924910630356277447014258270888329547267471837899275103421406467763122499270790512099702898939814547982931674247240623063334781529511973585977522269522704997379194673181703247780179146749499072297334876619475914747479522310651303344623434565831770309615574478274456549054332451773452773119453059618433160299319070430295124113199473337940505806777950838270849); _sage_const_641747 = Integer(641747); _sage_const_730024611795626517480532940587152891926416120514706825368440230330259913837764632826884065065554839415540061752397144140563698277864414584568812699048873820551131185796851863064509294123861487954267708318027370912496252338232193619491860340395824180108335802813022066531232025997349683725357024257420090981323217296019482516072036780365510855555146547481407283231721904830868033930943 = Integer(730024611795626517480532940587152891926416120514706825368440230330259913837764632826884065065554839415540061752397144140563698277864414584568812699048873820551131185796851863064509294123861487954267708318027370912496252338232193619491860340395824180108335802813022066531232025997349683725357024257420090981323217296019482516072036780365510855555146547481407283231721904830868033930943); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_100000 = Integer(100000)
from Crypto.Util.number import *
from gmpy2 import *
import random
import math
p = _sage_const_91027438112295439314606669837102361953591324472804851543344131406676387779969 
n = _sage_const_6249734963373034215610144758924910630356277447014258270888329547267471837899275103421406467763122499270790512099702898939814547982931674247240623063334781529511973585977522269522704997379194673181703247780179146749499072297334876619475914747479522310651303344623434565831770309615574478274456549054332451773452773119453059618433160299319070430295124113199473337940505806777950838270849 
e = _sage_const_641747 
c = _sage_const_730024611795626517480532940587152891926416120514706825368440230330259913837764632826884065065554839415540061752397144140563698277864414584568812699048873820551131185796851863064509294123861487954267708318027370912496252338232193619491860340395824180108335802813022066531232025997349683725357024257420090981323217296019482516072036780365510855555146547481407283231721904830868033930943 


def onemod(e, q):
    p = random.randint(_sage_const_1 , q-_sage_const_1 )
    while(powmod(p, (q-_sage_const_1 )//e, q) == _sage_const_1 ):  # (r,s)=1
        p = random.randint(_sage_const_1 , q)
    return p

def AMM_rth(o, r, q):  # r|(q-1)
    assert((q-_sage_const_1 ) % r == _sage_const_0 )
    p = onemod(r, q)

    t = _sage_const_0 
    s = q-_sage_const_1 
    while(s % r == _sage_const_0 ):
        s = s//r
        t += _sage_const_1 
    k = _sage_const_1 
    while((s*k+_sage_const_1 ) % r != _sage_const_0 ):
        k += _sage_const_1 
    alp = (s*k+_sage_const_1 )//r

    a = powmod(p, r**(t-_sage_const_1 )*s, q)
    b = powmod(o, r*a-_sage_const_1 , q)
    c = powmod(p, s, q)
    h = _sage_const_1 

    for i in range(_sage_const_1 , t-_sage_const_1 ):
        d = powmod(int(b), r**(t-_sage_const_1 -i), q)
        if d == _sage_const_1 :
            j = _sage_const_0 
        else:
            j = (-math.log(d, a)) % r
        b = (b*(c**(r*j))) % q
        h = (h*c**j) % q
        c = (c*r) % q
    result = (powmod(o, alp, q)*h)
    return result

def ALL_Solution(m, q, rt, cq, e):
    mp = []
    for pr in rt:
        r = (pr*m) % q
        # assert(pow(r, e, q) == cq)
        mp.append(r)
    return mp


def calc(mp, mq, mr, e, p, q, r):
    i = _sage_const_1 
    j = _sage_const_1 
    t1 = invert(q*r, p)
    t2 = invert(p*r, q)
    t3 = invert(p*q, r)
    for mp1 in mp:
        for mq1 in mq:
            for mr1 in mr:
                j += _sage_const_1 
                if j % _sage_const_100000  == _sage_const_0 :
                    print(j)
                ans = (mp1*t1*q*r+mq1*t2*p*r+mr1*t3*p*q) % (p*q*r)
                if check(ans):
                    return
    return


def check(m):
    try:
        a = long_to_bytes(m)
        if b'flag' in a:
            print(a)
            return True
        else:
            return False
    except:
        return False


def ALL_ROOT2(r, q):  # use function set() and .add() ensure that the generated elements are not repeated
    li = set()
    while(len(li) < r):
        p = powmod(random.randint(_sage_const_1 , q-_sage_const_1 ), (q-_sage_const_1 )//r, q)
        li.add(p)
    return li

cp = c % p

mp = AMM_rth(cp, e, p)


rt1 = ALL_ROOT2(e, p)


amp = ALL_Solution(mp, p, rt1, cp, e)

for i in amp:
    m = long_to_bytes(int(i))
    if b'flag{' in m:
        print(m)
        break
'''calc(amp, amq, amr, e, p, q, r)  # 这里你改一下函数就可以输出了'''

